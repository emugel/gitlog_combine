#!/bin/bash

defaultNumberOfLastEntries=15

# ------------ don't edit below, unless you know what you're doing -----------
#
progName="$( basename "$0" )"
version=0.1

warn() { local fmt="$1"; shift; printf "$progName: $fmt\n" "$@" >&2; }
die () { local st="$?"; warn "$@"; exit "$st"; } 
define(){ IFS='\n' read -r -d '' ${1} || true; }

define helpString <<EOF
$progName v$version - combine the git log of several repositories
Public domain
Syntax: $progName [OPTIONS] dirs...

OPTIONS:
 --help -h        Show help
 --version -v     Show version and exit
 -n <n>           Show N last entries (default: $defaultNumberOfLastEntries)
 --all            Show all entries for first to last
 
EXAMPLES:
    $progName pokem*
    $progName example* test* ~/opt/src/test_foo -n 40
 
EOF

files=()
for i in "$@"; do
    case $i in
        --help | -h ) shift; echo "$helpString"; exit 0 ;;
        --version | -v ) shift; echo "$version"; exit 0 ;;
        -n) shift; optN=$1; shift ;;
        --all) shift; optAll=1 ;;
        -* ) echo "Unknown option: $i"; exit 1 ;;
        *)  files+=( "$i" );;
    esac
done

if [[ -n $optAll ]]; then defaultNumberOfLastEntries=999999
elif [[ -n $optN ]]; then defaultNumberOfLastEntries="$optN"
fi

tmp="$( mktemp )"
for f in "${files[@]}"; do
    dir="$f"
    if [[ -d "$dir" && -d "$dir/.git/" ]]; then
        cd "$dir"
        branch=$(git describe --contains --all HEAD  2>&1 >/dev/null )
        # branch will be empty if error. 
        # In that case we want not to exec next line
        [[ -n $branch ]] || git log --pretty=format:"%ct|%H|%ar|$dir:$branch|%s" --abbrev-commit >> "$tmp"
        cd - >/dev/null
    fi
done

tmp2="$( mktemp )"
sort "$tmp" | tail -n "$defaultNumberOfLastEntries" > "$tmp2"
# see also snippet "stdin"
while read -ru3 line; do
    if [[ "$line" =~ ^(.*)\|(.*)\|(.*)\|(.*):(.*)\|(.*)$ ]]; then
        ts="${BASH_REMATCH[1]}"
        fullhash="${BASH_REMATCH[2]}"
        ago="${BASH_REMATCH[3]}"
        repo="[1;37m$( realpath --relative-base="$PWD" "${BASH_REMATCH[4]}" )[0m"
        branch="${BASH_REMATCH[5]}"
        commitmsg="${BASH_REMATCH[6]}"
        repobranch="$repo"
        [[ $branch = "master" ]] || repobranch+="[1;37m:[30m$branch[0m"
        # echo -e "[1;33m$ago[0m $repo[1;37m:[36m$branch[0m $commitmsg"
        echo -e "[1;33m$ago[0m [1;30m${fullhash:0:5}[0m $repobranch[0m $commitmsg"
    fi
done 3<"$tmp2"

rm -f "$tmp" "$tmp2"

