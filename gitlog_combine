#!/bin/bash

defaultNumberOfLastEntries=15

# ------------ don't edit below, unless you know what you're doing -----------
#
progName="$( basename "$0" )"
version=0.1.4

warn() { local fmt="$1"; shift; printf "$progName: $fmt\n" "$@" >&2; }
die () { local st="$?"; warn "$@"; exit "$st"; } 
define(){ IFS='\n' read -r -d '' ${1} || true; }
# Usage: inarray "$value" "${array[@]}"
inarray() { local n=$1 h; shift; for h; do [[ $n = "$h" ]] && return; done; return 1; }

define helpString <<EOF
$progName v$version - combine the git log of several repositories
Public domain
Syntax: $progName [OPTIONS] dirs...

OPTIONS:
 --help -h        Show help
 --version -v     Show version and exit
 -n <N>           Show N last entries globally (default: $defaultNumberOfLastEntries)
 -m <M>           Show M last entries from EACH repo (e.g. -m 1 shows last entry per repo)
 --long -l        Enable long commit messages (default is to truncate at col 60)
 --all            Show all entries for first to last
 --nofollow       Ignore any symlink
 --exclude=<PATT> Exclude specified directory pattern, where pattern is text
                  (option can be repeated)
 
EXAMPLES:
    $progName pokem*
    $progName example* test* ~/opt/src/test_foo -n 40
 
EOF

files=()
excludes=()
for i in "$@"; do
    case $i in
        --help | -h ) shift; echo "$helpString"; exit 0 ;;
        --version | -v ) shift; echo "$version"; exit 0 ;;
        --nofollow ) shift; optNofollow=1 ;;
        -n) shift; optN=$1; shift ;;
        -m) shift; optM=$1; shift ;;
        --long | -l) shift; optLong=1 ;;
        --all) shift; optAll=1 ;;
        --exclude=*) 
            # echo $1
            excludes+=( "${1##--exclude=}" )
            shift
            # echo "${excludes[@]}"
            ;;
        --exclude) die "--exclude must be followed by an equal sign";;
        -* ) echo "Unknown option: $i"; exit 1 ;;
        *)  files+=( "$i" );;
    esac
done

if [[ -n $optAll ]]; then defaultNumberOfLastEntries=999999
elif [[ -n $optN ]]; then defaultNumberOfLastEntries="$optN"
fi

tmp="$( mktemp )"
for f in "${files[@]}"; do
    dir="$f"
    [[ -n $optNofollow && -h $dir ]] && continue
    for exclude in "${excludes[@]}"; do 
        [[ "$dir" =~ $exclude ]] && continue 2 
    done

    if [[ -d "$dir" && -d "$dir/.git/" ]]; then
        cd "$dir"
        branch=$(git describe --contains --all HEAD  2>&1 >/dev/null )

        [[ -n $optM ]] && sOptM="-n$optM --reverse"

        # show last N across all repos
        # branch will be empty if error. 
        # In that case we want not to exec next line
        [[ -n $branch ]] || git log $sOptM --pretty=format:"%ct|%H|%ar|$dir:$branch|%s" --abbrev-commit >> "$tmp"
        echo >> "$tmp"
        cd - >/dev/null
    fi
done

tmp2="$( mktemp )"
if [[ -n $optM ]]; then
    # show last M in each repo
    cp "$tmp" "$tmp2"
else 
    # show last N across all repos
    sort --numeric-sort "$tmp" | tail -n "$defaultNumberOfLastEntries" > "$tmp2"
fi

preformat_me() {
    while read -ru3 line; do
        if [[ "$line" =~ ^(.*)\|(.*)\|(.*)\|(.*):(.*)\|(.*)$ ]]; then
            ts="${BASH_REMATCH[1]}"
            fullhash="${BASH_REMATCH[2]}"
            ago="${BASH_REMATCH[3]}"
            repo="$( realpath --relative-base="$PWD" "${BASH_REMATCH[4]}" )"
            branch="${BASH_REMATCH[5]}"
            [[ -n $optLong ]] && commitmsg="${BASH_REMATCH[6]}" || commitmsg=${BASH_REMATCH[6]:0:60}""
            [[ $branch = "master" || -z $branch ]] || coloredbranch="[1;37m:[30m$branch[0m"
            if [[ -n $optM ]]; then echo -e "$repo:$branch:$ago:$commitmsg" 
            else 
                # TODO remove ANSI codes from here...
                # echo -e "$ago:${fullhash:0:5}:$repo:$coloredbranch:$commitmsg"
                echo -e "[1;33m$ago[0m [1;30m${fullhash:0:5}[0m [1;37m$repo$coloredbranch[0m $commitmsg"
            fi
        fi
    done 3<"$tmp2"
}

if [[ -n $optM ]]; then 
    # first, 2 awk commands to count max lengths of repo and date to set alignment
    maxLenField1=$( preformat_me | awk -F: '{ maxLen=(length($1) > maxLen ? length($1) : maxLen) } END { print maxLen }' )
    maxLenField3=$( preformat_me | awk -F: '{ maxLen=(length($3) > maxLen ? length($3) : maxLen) } END { print maxLen }' )
    # awk cmd to hide first column when it's similar to previous line(s).
    #       <--maxLen1---><--maxLen3-->
    # e.g. "pokemonclient 2 weeks ago  typo
    #       pokemonclient 1 weeks ago  change title
    #       pokemondoc    1 months ago reorganize"
    #
    # to show as:
    #       pokemonclient 2 weeks ago  typo
    #                     1 weeks ago  change title
    #       pokemondoc    1 months ago reorganize
    preformat_me | awk -F: '{ 
        printf "[1;37m%-'$(( maxLenField1+1 ))'s[0m", (prev1stCol == $1 ? "" : $1 )
        if ($3 ~ /(seconds|minutes|hours)/) { color="1;31m" } 
        else if ($3 ~ /(days)/)             { color="0;31m" }
        else if ($3 ~ /(weeks)/)            { color="0;33m" }
        else                                { color="1;30m" }
        printf "[" color "%-'$(( maxLenField3+1 ))'s[0m", $3  
        for (i=4; i<=NF; i++) printf "%s ", $i 
        print ""
        prev1stCol = $1  
    }' 
else preformat_me 
fi

rm -f "$tmp" "$tmp2"

